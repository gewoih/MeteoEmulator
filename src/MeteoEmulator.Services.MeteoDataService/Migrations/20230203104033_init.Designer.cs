// <auto-generated />
using System;
using MeteoEmulator.Services.MeteoDataService.DAL.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeteoEmulator.Services.MeteoDataService.Migrations
{
    [DbContext(typeof(MeteoDataDBContext))]
    [Migration("20230203104033_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.Models.MeteoDataPackage", b =>
                {
                    b.Property<long>("DataPackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DataPackageID"));

                    b.Property<string>("EmulatorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DataPackageID");

                    b.ToTable("MeteoDataPackage");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("MeteoDataPackageDataPackageID")
                        .HasColumnType("bigint");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SensorValue")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("MeteoDataPackageDataPackageID");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.Models.SensorData", b =>
                {
                    b.HasOne("MeteoEmulator.Libraries.SharedLibrary.Models.MeteoDataPackage", null)
                        .WithMany("SensorData")
                        .HasForeignKey("MeteoDataPackageDataPackageID");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.Models.MeteoDataPackage", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
