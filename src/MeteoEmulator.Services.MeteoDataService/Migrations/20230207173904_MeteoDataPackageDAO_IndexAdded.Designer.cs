// <auto-generated />
using MeteoEmulator.Services.MeteoDataService.DAL.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeteoEmulator.Services.MeteoDataService.Migrations
{
    [DbContext(typeof(MeteoDataDBContext))]
    [Migration("20230207173904_MeteoDataPackageDAO_IndexAdded")]
    partial class MeteoDataPackageDAOIndexAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.DAO.MeteoDataPackageDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MeteoStationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PackageNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeteoStationName");

                    b.ToTable("MeteoStationsData");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.DAO.SensorDataDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackageId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("SensorsData");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.DAO.SensorDataDAO", b =>
                {
                    b.HasOne("MeteoEmulator.Libraries.SharedLibrary.DAO.MeteoDataPackageDAO", "Package")
                        .WithMany("SensorData")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("MeteoEmulator.Libraries.SharedLibrary.DAO.MeteoDataPackageDAO", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
